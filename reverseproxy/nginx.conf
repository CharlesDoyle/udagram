worker_processes 1;
  
events { worker_connections 1024; }
error_log /dev/stdout debug;

http {

    sendfile on;

    upstream user {
        server backend-user:8080;
    }

    upstream feed {
        server backend-feed:8080;
    }
    
    proxy_set_header   Host $host;
    proxy_set_header   X-Real-IP $remote_addr;
    proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header   X-Forwarded-Host $server_name;
    
    server {
        listen 8080;
        location /api/v0/feed {
            add_header 'Access-Control-Allow-Origin' '*';
            proxy_pass         http://feed;
        }
        location /api/v0/users {
            proxy_pass         http://user;
        }            
    }

}
# proxy_pass  http://feed    (this establishes that this nginx container will pass any query to http://feed
# feed is defined above as backend-feed:8080, which is a ClusterIP service that has an IP address)
# backend-feed, backend-user are DNS names with ClusterIPs 
# So http://feed becomes http://backend-feed_host:8080 (where backend-feed_host is whatever the IP
# of the backend-feed service is)
# Defining the backend as http://feed means we have to create the backend-feed ClusterIP service, so this
# reverseproxy can pass queries to the backend-feed.
# We also need the backend-user ClusterIP service.